"""
YAMLLM CLI - Backward compatibility wrapper.

This module provides backward compatibility by redirecting to the new
modular CLI structure in yamllm.cli package.

The monolithic CLI has been refactored into:
- yamllm.cli.main: Main entry point and command assembly
- yamllm.cli.tools: Tool management commands
- yamllm.cli.config: Configuration commands
- yamllm.cli.chat: Chat interface commands
- yamllm.cli.memory: Memory management commands
"""

import sys
from yamllm.cli.main import main

__version__ = "0.1.12"

# Legacy imports for backward compatibility (in case other modules import from here)
import argparse
import os
from pathlib import Path
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich import box

from yamllm.ui.chat_cli import run_chat
from yamllm.core.parser import parse_yaml_config
from yamllm.core.config_templates import template_manager
from yamllm.core.error_messages import error_helper, help_system
from yamllm.core.setup_wizard import SetupWizard
from yamllm.core.tool_management import tool_manager

console = Console()


# Legacy function stubs for backward compatibility
# These redirect to the new modular CLI

def migrate_index(args: argparse.Namespace) -> int:
    try:
        import faiss  # Lazy import to avoid hard dependency when not needed
    except Exception as e:
        print("FAISS is not installed. Install 'faiss-cpu' to manage vector indexes.")
        return 1
    store_path = args.store_path
    index_path = os.path.join(store_path, "faiss_index.idx")
    metadata_path = os.path.join(store_path, "metadata.pkl")

    if not os.path.exists(index_path):
        print(f"No index found at {index_path}. Nothing to migrate.")
        return 0

    try:
        index = faiss.read_index(index_path)
        dim = getattr(index, "d", None)
        print(f"Found index: {index_path} (dimension={dim})")
    except Exception as e:
        print(f"Failed to read index: {e}")
        return 1

    mismatched = args.expect_dim is not None and dim is not None and dim != args.expect_dim
    if mismatched:
        print(
            f"Dimension mismatch: index={dim}, expected={args.expect_dim}. "
            f"This indicates the embedding model has changed."
        )

    if args.purge or (mismatched and Confirm.ask("Purge incompatible index/metadata now?", default=False)):
        try:
            os.remove(index_path)
            if os.path.exists(metadata_path):
                os.remove(metadata_path)
            print("Purged vector index and metadata. They will be rebuilt on next run.")
            return 0
        except Exception as e:
            print(f"Failed to purge index/metadata: {e}")
            return 1

    print("No action taken. Use --purge to delete incompatible index/metadata.")
    return 0


def show_status(args: argparse.Namespace) -> int:
    """Show system status and health checks."""
    console.print("\n[bold cyan]YAMLLM System Status[/bold cyan]\n")
    
    # System info
    table = Table(title="System Information", box=box.ROUNDED)
    table.add_column("Component", style="cyan")
    table.add_column("Status", style="green")
    table.add_column("Details", style="dim")
    
    # Version
    table.add_row("Version", f"✓ {__version__}", "")
    
    # Python version
    import platform
    python_version = platform.python_version()
    table.add_row("Python", f"✓ {python_version}", "")
    
    # Check dependencies
    try:
        import rich
        try:
            version = getattr(rich, '__version__', 'unknown')
        except:
            version = 'available'
        table.add_row("Rich UI", "✓ Available", f"v{version}")
    except ImportError:
        table.add_row("Rich UI", "✗ Missing", "Install with: pip install rich")
    
    try:
        import yaml
        table.add_row("YAML Parser", "✓ Available", "")
    except ImportError:
        table.add_row("YAML Parser", "✗ Missing", "Install with: pip install pyyaml")
    
    # Check API keys
    api_keys = {
        "OpenAI": os.getenv("OPENAI_API_KEY"),
        "Anthropic": os.getenv("ANTHROPIC_API_KEY"),
        "Google": os.getenv("GOOGLE_API_KEY"),
        "Mistral": os.getenv("MISTRAL_API_KEY"),
        "OpenRouter": os.getenv("OPENROUTER_API_KEY"),
    }
    
    for provider, key in api_keys.items():
        status = "✓ Set" if key else "○ Not set"
        table.add_row(f"{provider} API Key", status, "")
    
    console.print(table)
    
    # Config directory info
    home_dir = Path.home()
    config_dirs = [
        home_dir / ".yamllm",
        Path.cwd() / ".config_examples",
        Path.cwd() / "config",
    ]
    
    console.print("\n[bold]Configuration Directories:[/bold]")
    for config_dir in config_dirs:
        if config_dir.exists():
            console.print(f"  ✓ {config_dir}")
        else:
            console.print(f"  ○ {config_dir} (not found)")
    
    return 0


def list_providers(args: argparse.Namespace) -> int:
    """List supported providers and their capabilities."""
    console.print("\n[bold cyan]Supported LLM Providers[/bold cyan]\n")
    
    providers_info = {
        "OpenAI": {
            "models": ["gpt-4", "gpt-4-turbo", "gpt-3.5-turbo"],
            "features": ["Chat", "Tools", "Streaming", "Vision"],
            "env_var": "OPENAI_API_KEY"
        },
        "Anthropic": {
            "models": ["claude-3-opus", "claude-3-sonnet", "claude-3-haiku"],
            "features": ["Chat", "Tools", "Streaming", "Large Context"],
            "env_var": "ANTHROPIC_API_KEY"
        },
        "Google": {
            "models": ["gemini-pro", "gemini-pro-vision"],
            "features": ["Chat", "Tools", "Vision", "Free Tier"],
            "env_var": "GOOGLE_API_KEY"
        },
        "Mistral": {
            "models": ["mistral-large", "mistral-medium", "mistral-small"],
            "features": ["Chat", "Tools", "Streaming"],
            "env_var": "MISTRAL_API_KEY"
        },
        "Azure OpenAI": {
            "models": ["GPT-4", "GPT-3.5-Turbo"],
            "features": ["Chat", "Tools", "Enterprise"],
            "env_var": "AZURE_OPENAI_API_KEY"
        },
        "DeepSeek": {
            "models": ["deepseek-chat", "deepseek-coder"],
            "features": ["Chat", "Tools", "Code Generation"],
            "env_var": "DEEPSEEK_API_KEY"
        },
        "OpenRouter": {
            "models": ["Multiple providers", "200+ models"],
            "features": ["Chat", "Tools", "Multi-provider"],
            "env_var": "OPENROUTER_API_KEY"
        }
    }
    
    for provider, info in providers_info.items():
        # Check if API key is available
        api_key = os.getenv(info["env_var"])
        status_color = "green" if api_key else "dim"
        status_text = "✓ Ready" if api_key else "○ Setup needed"
        
        panel_content = []
        panel_content.append(f"[bold]Status:[/bold] [{status_color}]{status_text}[/{status_color}]")
        panel_content.append(f"[bold]Environment Variable:[/bold] {info['env_var']}")
        panel_content.append(f"[bold]Popular Models:[/bold] {', '.join(info['models'][:3])}")
        panel_content.append(f"[bold]Features:[/bold] {', '.join(info['features'])}")
        
        panel = Panel(
            "\n".join(panel_content),
            title=f"[bold]{provider}[/bold]",
            border_style=status_color,
            box=box.ROUNDED
        )
        console.print(panel)
    
    console.print("\n[dim]Set the appropriate environment variable to enable a provider.[/dim]")
    console.print("[dim]Example: export OPENAI_API_KEY=your-key-here[/dim]")
    
    return 0


def list_tools(args: argparse.Namespace) -> int:
    """List available tools and tool packs with enhanced information."""
    console.print("\n[bold cyan]Available Tools & Tool Packs[/bold cyan]\n")
    
    # Handle specific pack display
    if hasattr(args, 'pack') and args.pack:
        pack_info = tool_manager.registry.get_pack(args.pack)
        if not pack_info:
            console.print(f"[red]Tool pack '{args.pack}' not found[/red]")
            return 1
        
        console.print(f"[bold cyan]Tool Pack: {pack_info.name}[/bold cyan]")
        console.print(f"[dim]{pack_info.description}[/dim]\n")
        
        tools = tool_manager.get_pack_tools(args.pack)
        
        table = Table(title=f"Tools in '{pack_info.name}' pack", box=box.ROUNDED)
        table.add_column("Tool", style="cyan")
        table.add_column("Description", style="dim")
        table.add_column("Status", style="green", justify="center")
        table.add_column("Usage", style="yellow", justify="right")
        
        for tool in tools:
            status = "✓" if tool.enabled else "○"
            usage = str(tool.usage_count) if tool.usage_count > 0 else "-"
            
            table.add_row(tool.name, tool.description, status, usage)
        
        console.print(table)
        return 0
    
    # Show category filter if specified
    category_filter = getattr(args, 'category', None)
    
    # Display tool packs
    console.print("[bold]Tool Packs:[/bold]")
    packs = tool_manager.registry.list_packs(category_filter)
    
    for pack in packs:
        tools_in_pack = tool_manager.get_pack_tools(pack.name)
        enabled_count = sum(1 for t in tools_in_pack if t.enabled)
        total_count = len(tools_in_pack)
        
        status_text = f"{enabled_count}/{total_count} enabled"
        status_color = "green" if enabled_count == total_count else "yellow" if enabled_count > 0 else "red"
        
        panel_content = [
            f"[dim]{pack.description}[/dim]",
            f"[bold]Tools:[/bold] {', '.join(pack.tools)}",
            f"[bold]Status:[/bold] [{status_color}]{status_text}[/{status_color}]"
        ]
        
        panel = Panel(
            "\n".join(panel_content),
            title=f"[cyan]{pack.name}[/cyan]",
            border_style=status_color,
            box=box.MINIMAL
        )
        console.print(panel)
    
    # Display individual tools
    console.print("\n[bold]Individual Tools:[/bold]")
    tools = tool_manager.list_tools_detailed(category_filter)
    
    table = Table(box=box.MINIMAL)
    table.add_column("Tool", style="cyan", width=15)
    table.add_column("Description", style="dim", width=40)
    table.add_column("Category", style="magenta", width=12)
    table.add_column("Status", style="green", justify="center", width=8)
    table.add_column("Usage", style="yellow", justify="right", width=8)
    
    for tool in tools[:20]:  # Limit to first 20 tools
        status = "✓" if tool.enabled else "○"
        if tool.requires_api_key and not os.getenv(tool.api_key_env or ""):
            status += " ⚠"
        
        usage = str(tool.usage_count) if tool.usage_count > 0 else "-"
        
        table.add_row(
            tool.name,
            tool.description[:35] + "..." if len(tool.description) > 35 else tool.description,
            tool.category,
            status,
            usage
        )
    
    console.print(table)
    
    if len(tools) > 20:
        console.print(f"[dim]... and {len(tools) - 20} more tools[/dim]")
    
    console.print("\n[bold]Commands:[/bold]")
    console.print("• List specific pack: [dim]yamllm tools --pack <name>[/dim]")
    console.print("• Tool details: [dim]yamllm tools info <name>[/dim]")
    console.print("• Test tool: [dim]yamllm tools test <name>[/dim]")
    console.print("• Manage tools: [dim]yamllm tools manage[/dim]")
    
    return 0


def show_tool_info(args: argparse.Namespace) -> int:
    """Show detailed information about a specific tool."""
    tool_name = args.tool
    tool_info = tool_manager.get_tool_info(tool_name)
    
    if not tool_info:
        console.print(f"[red]Tool '{tool_name}' not found[/red]")
        return 1
    
    console.print(f"\n[bold cyan]Tool Information: {tool_info.name}[/bold cyan]\n")
    
    # Basic information
    info_table = Table(box=box.ROUNDED, show_header=False)
    info_table.add_column("Property", style="cyan", width=20)
    info_table.add_column("Value", style="white")
    
    info_table.add_row("Name", tool_info.name)
    info_table.add_row("Description", tool_info.description)
    info_table.add_row("Category", tool_info.category)
    info_table.add_row("Version", tool_info.version)
    info_table.add_row("Author", tool_info.author)
    info_table.add_row("Enabled", "✓ Yes" if tool_info.enabled else "○ No")
    
    if tool_info.requires_api_key:
        api_key_status = "✓ Set" if os.getenv(tool_info.api_key_env or "") else "✗ Missing"
        info_table.add_row("API Key Required", tool_info.api_key_env or "Unknown")
        info_table.add_row("API Key Status", api_key_status)
    
    console.print(info_table)
    
    # Usage statistics
    if tool_info.usage_count > 0:
        console.print("\n[bold]Usage Statistics:[/bold]")
        
        stats_table = Table(box=box.MINIMAL, show_header=False)
        stats_table.add_column("Metric", style="cyan")
        stats_table.add_column("Value", style="green")
        
        stats_table.add_row("Usage Count", str(tool_info.usage_count))
        stats_table.add_row("Success Rate", f"{tool_info.success_rate:.1f}%")
        stats_table.add_row("Avg Execution Time", f"{tool_info.average_execution_time:.2f}s")
        
        if tool_info.last_used:
            stats_table.add_row("Last Used", tool_info.last_used.strftime("%Y-%m-%d %H:%M:%S"))
        
        console.print(stats_table)
    else:
        console.print("\n[dim]No usage statistics available[/dim]")
    
    # Dependencies
    if tool_info.dependencies:
        console.print("\n[bold]Dependencies:[/bold]")
        for dep in tool_info.dependencies:
            console.print(f"  • {dep}")
    
    return 0


def test_tool(args: argparse.Namespace) -> int:
    """Test a specific tool."""
    tool_name = args.tool
    
    console.print(f"\n[bold cyan]Testing Tool: {tool_name}[/bold cyan]\n")
    
    with console.status(f"Testing {tool_name}...", spinner="dots"):
        result = tool_manager.test_tool(tool_name)
    
    if result["success"]:
        console.print(f"[green]✓ Tool '{tool_name}' is ready to use[/green]")
        
        if result["warnings"]:
            console.print("\n[yellow]⚠ Warnings:[/yellow]")
            for warning in result["warnings"]:
                console.print(f"  • {warning}")
    else:
        console.print(f"[red]✗ Tool '{tool_name}' failed test[/red]")
        console.print(f"[red]Error: {result['error']}[/red]")
        
        if not result["requirements_met"]:
            console.print("\n[yellow]Requirements not met. Check API keys or dependencies.[/yellow]")
    
    return 0 if result["success"] else 1


def manage_tools(args: argparse.Namespace) -> int:
    """Interactive tool management."""
    console.print("\n[bold cyan]Tool Management[/bold cyan]\n")
    
    # Show summary
    all_tools = tool_manager.list_tools_detailed()
    enabled_tools = [t for t in all_tools if t.enabled]
    tools_with_issues = [t for t in all_tools if t.requires_api_key and not os.getenv(t.api_key_env or "")]
    
    console.print("[bold]Summary:[/bold]")
    console.print(f"• Total tools: {len(all_tools)}")
    console.print(f"• Enabled: {len(enabled_tools)}")
    console.print(f"• With issues: {len(tools_with_issues)}")
    
    if tools_with_issues:
        console.print("\n[yellow]Tools with missing API keys:[/yellow]")
        for tool in tools_with_issues:
            console.print(f"  • {tool.name} (needs {tool.api_key_env})")
    
    # Show most used tools
    used_tools = [t for t in all_tools if t.usage_count > 0]
    if used_tools:
        console.print("\n[bold]Most Used Tools:[/bold]")
        used_tools.sort(key=lambda x: x.usage_count, reverse=True)
        
        for tool in used_tools[:5]:
            console.print(f"  • {tool.name}: {tool.usage_count} uses ({tool.success_rate:.1f}% success)")
    
    console.print("\n[dim]Use 'yamllm tools info <name>' for detailed tool information[/dim]")
    console.print("[dim]Use 'yamllm tools test <name>' to test tool functionality[/dim]")
    
    return 0


def search_tools(args: argparse.Namespace) -> int:
    """Search for tools by name or description."""
    query = args.query
    
    console.print(f"\n[bold cyan]Search Results for '{query}'[/bold cyan]\n")
    
    results = tool_manager.registry.search_tools(query)
    
    if not results:
        console.print(f"[dim]No tools found matching '{query}'[/dim]")
        return 0
    
    table = Table(box=box.MINIMAL)
    table.add_column("Tool", style="cyan")
    table.add_column("Description", style="dim")
    table.add_column("Category", style="magenta")
    table.add_column("Status", style="green", justify="center")
    
    for tool in results:
        status = "✓" if tool.enabled else "○"
        if tool.requires_api_key and not os.getenv(tool.api_key_env or ""):
            status += " ⚠"
        
        table.add_row(tool.name, tool.description, tool.category, status)
    
    console.print(table)
    console.print(f"\n[dim]Found {len(results)} tools[/dim]")
    
    return 0


def validate_config(args: argparse.Namespace) -> int:
    """Validate a configuration file."""
    config_path = args.config
    
    if not os.path.exists(config_path):
        error_helper.config_file_not_found_error(config_path)
        return 1
    
    console.print(f"\n[bold cyan]Validating Configuration: {config_path}[/bold cyan]\n")
    
    try:
        config = parse_yaml_config(config_path)
        console.print("[green]✓ Configuration file is valid![/green]\n")
        
        # Show summary
        table = Table(title="Configuration Summary", box=box.ROUNDED)
        table.add_column("Setting", style="cyan")
        table.add_column("Value", style="green")
        
        table.add_row("Provider", config.provider.name)
        table.add_row("Model", config.provider.model)
        table.add_row("Temperature", str(config.model_settings.temperature))
        table.add_row("Max Tokens", str(config.model_settings.max_tokens))
        table.add_row("Tools Enabled", "Yes" if config.tools.enabled else "No")
        table.add_row("Memory Enabled", "Yes" if config.context.memory.enabled else "No")
        table.add_row("Streaming", "Yes" if config.output.stream else "No")
        
        if config.tools.enabled:
            if config.tools.packs:
                table.add_row("Tool Packs", ", ".join(config.tools.packs))
            if config.tools.tools:
                table.add_row("Individual Tools", ", ".join(config.tools.tools))
        
        console.print(table)
        
        # Check for potential issues
        warnings = []
        
        # Check API key
        provider_env_vars = {
            "openai": "OPENAI_API_KEY",
            "anthropic": "ANTHROPIC_API_KEY", 
            "google": "GOOGLE_API_KEY",
            "mistral": "MISTRAL_API_KEY"
        }
        
        env_var = provider_env_vars.get(config.provider.name.lower())
        if env_var and not os.getenv(env_var):
            warnings.append(f"Environment variable {env_var} is not set")
        
        # Check tool configuration
        if config.tools.enabled and not config.tools.packs and not config.tools.tools:
            warnings.append("Tools are enabled but no tools are configured")
        
        if warnings:
            console.print("\n[yellow]⚠ Warnings:[/yellow]")
            for warning in warnings:
                console.print(f"  • {warning}")
                
            # Show actionable help for API key warnings
            if any("API_KEY" in warning for warning in warnings):
                provider_name = config.provider.name
                console.print(f"\n[dim]To set API key: export {env_var}=your-key-here[/dim]")
        
        return 0
        
    except Exception as e:
        error_helper.invalid_config_error(str(e), config_path)
        return 1


def show_quick_start(args: argparse.Namespace) -> int:
    """Show quick start guide."""
    console.print("\n[bold cyan]YAMLLM Quick Start[/bold cyan]\n")
    
    # Show two paths: guided setup or manual setup
    console.print("[bold]Choose your path:[/bold]\n")
    
    # Path 1: Guided setup
    console.print("[bold green]🧙 Guided Setup (Recommended for new users)[/bold green]")
    console.print("  [dim]yamllm init[/dim]")
    console.print("  [dim]Interactive wizard walks you through everything[/dim]\n")
    
    # Path 2: Manual setup
    console.print("[bold blue]⚡ Quick Manual Setup[/bold blue]")
    steps = [
        ("1. Set up API Key", "export OPENAI_API_KEY=your-key-here"),
        ("2. Create config", "yamllm config create --provider openai --preset casual"),
        ("3. Start chatting", "yamllm chat --config openai_casual_config.yaml"),
        ("4. Check status", "yamllm status"),
    ]
    
    for step, command in steps:
        console.print(f"  [dim]{step}: {command}[/dim]")
    
    console.print("\n[bold]More commands:[/bold]")
    console.print("• Full guide: [dim]yamllm guide[/dim]")
    console.print("• List providers: [dim]yamllm providers[/dim]")
    console.print("• Help: [dim]yamllm --help[/dim]")
    return 0


def show_getting_started(args: argparse.Namespace) -> int:
    """Show comprehensive getting started guide."""
    help_system.show_getting_started()
    return 0


def run_setup_wizard(args: argparse.Namespace) -> int:
    """Run the interactive setup wizard."""
    wizard = SetupWizard()
    
    try:
        success = wizard.run()
        return 0 if success else 1
    except KeyboardInterrupt:
        console.print("\n[yellow]Setup cancelled.[/yellow]")
        return 1
    except Exception as e:
        console.print(f"\n[red]Setup failed: {e}[/red]")
        return 1


def create_config(args: argparse.Namespace) -> int:
    """Create a new configuration file from template."""
    provider = args.provider
    preset = args.preset
    model = args.model
    output = args.output or f"{provider}_{preset}_config.yaml"
    
    console.print("\n[bold cyan]Creating Configuration[/bold cyan]\n")
    
    # Validate parameters
    warnings = template_manager.validate_template_params(provider, preset, model)
    if warnings:
        console.print("[yellow]⚠ Warnings:[/yellow]")
        for warning in warnings:
            console.print(f"  • {warning}")
        
        if not console.input("\nContinue anyway? [y/N] ").lower().startswith('y'):
            return 1
    
    try:
        # Create config
        config = template_manager.create_config(
            provider=provider,
            preset=preset,
            model=model,
            output_path=output,
            temperature=args.temperature,
            max_tokens=args.max_tokens,
            streaming=args.streaming,
            tools_enabled=not args.no_tools,
            memory_enabled=not args.no_memory
        )
        
        console.print(f"[green]✓ Configuration created: {output}[/green]\n")
        
        # Show summary
        table = Table(title="Generated Configuration", box=box.ROUNDED)
        table.add_column("Setting", style="cyan")
        table.add_column("Value", style="green")
        
        table.add_row("Provider", provider)
        table.add_row("Model", model or template_manager.provider_models[provider][0])
        table.add_row("Preset", f"{preset} - {template_manager.presets[preset]}")
        table.add_row("Output File", output)
        table.add_row("Tools", "Enabled" if not args.no_tools else "Disabled")
        table.add_row("Memory", "Enabled" if not args.no_memory else "Disabled")
        table.add_row("Streaming", "Yes" if args.streaming else "No")
        
        console.print(table)
        
        # Show next steps
        console.print("\n[bold]Next steps:[/bold]")
        console.print(f"1. Set your API key: export {provider.upper()}_API_KEY=your-key")
        console.print(f"2. Test the config: yamllm config validate {output}")
        console.print(f"3. Start chatting: yamllm chat --config {output}")
        
        return 0
        
    except Exception as e:
        console.print("[red]✗ Failed to create configuration:[/red]")
        console.print(f"[red]{str(e)}[/red]")
        return 1


def list_presets(args: argparse.Namespace) -> int:
    """List available configuration presets."""
    console.print("\n[bold cyan]Configuration Presets[/bold cyan]\n")
    
    presets = template_manager.list_presets()
    
    for preset_name, description in presets.items():
        # Show preset details based on name
        if preset_name == "casual":
            details = "• Basic tools (calculator, weather, web search)\n• Conversational system prompt\n• Memory enabled\n• Balanced settings"
        elif preset_name == "coding":
            details = "• Development tools (files, text processing)\n• Code-focused system prompt\n• Extended context\n• Higher token limits"
        elif preset_name == "research":
            details = "• Research tools (web scraping, analysis)\n• Citation-focused prompts\n• Extended memory\n• Unrestricted web access"
        elif preset_name == "minimal":
            details = "• No tools enabled\n• Basic system prompt\n• No memory\n• Lower resource usage"
        else:
            details = "• Standard configuration"
        
        panel = Panel(
            f"[dim]{description}[/dim]\n\n{details}",
            title=f"[bold cyan]{preset_name}[/bold cyan]",
            border_style="cyan",
            box=box.ROUNDED
        )
        console.print(panel)
    
    console.print("\n[dim]Use: yamllm config create --provider <provider> --preset <preset>[/dim]")
    return 0


def list_models(args: argparse.Namespace) -> int:
    """List available models for providers."""
    console.print("\n[bold cyan]Available Models by Provider[/bold cyan]\n")
    
    for provider in template_manager.list_templates():
        models = template_manager.list_models(provider)
        
        table = Table(title=f"{provider.upper()} Models", box=box.MINIMAL)
        table.add_column("Model", style="cyan")
        table.add_column("Recommended For", style="dim")
        
        # Add model recommendations
        for model in models:
            if "gpt-4" in model.lower():
                recommendation = "Best quality, higher cost"
            elif "gpt-3.5" in model.lower():
                recommendation = "Good balance of cost and quality"
            elif "claude-3-opus" in model.lower():
                recommendation = "Highest capability Claude model"
            elif "claude-3-sonnet" in model.lower():
                recommendation = "Balanced Claude model"
            elif "claude-3-haiku" in model.lower():
                recommendation = "Fastest Claude model"
            elif "gemini-pro" in model.lower():
                recommendation = "Good free tier option"
            else:
                recommendation = "General purpose"
            
            table.add_row(model, recommendation)
        
        console.print(table)
        console.print()
    
    return 0


def list_themes(args: argparse.Namespace) -> int:
    """List available themes."""
    try:
        from yamllm.ui.themes import theme_manager
        
        console.print("\n[bold cyan]Available Themes[/bold cyan]\n")
        
        themes = theme_manager.list_themes()
        current_theme = theme_manager.get_current_theme()
        
        table = Table(title="UI Themes", box=box.ROUNDED)
        table.add_column("Theme", style="cyan")
        table.add_column("Description", style="white")
        table.add_column("Status", justify="center")
        
        for theme_name, theme_config in themes.items():
            status = "[green]✓ Current[/green]" if theme_name == current_theme else ""
            table.add_row(theme_name.title(), theme_config.description, status)
        
        console.print(table)
        console.print("\n[dim]Use 'yamllm theme preview <name>' to preview a theme[/dim]")
        console.print("[dim]Use 'yamllm theme set <name>' to set a theme[/dim]")
        
        return 0
        
    except Exception as e:
        console.print(f"[red]✗ Error listing themes: {e}[/red]")
        return 1


def preview_theme(args: argparse.Namespace) -> int:
    """Preview a theme."""
    try:
        from yamllm.ui.themes import theme_manager
        
        theme_config = theme_manager.get_theme(args.theme)
        if not theme_config:
            console.print(f"[red]✗ Theme '{args.theme}' not found[/red]")
            return 1
        
        console.print(f"\n[bold cyan]Preview: {args.theme.title()} Theme[/bold cyan]\n")
        
        # Show theme details
        info_table = Table(title="Theme Information", box=box.ROUNDED)
        info_table.add_column("Property", style="cyan")
        info_table.add_column("Value", style="white")
        
        info_table.add_row("Name", args.theme.title())
        info_table.add_row("Description", theme_config.description)
        info_table.add_row("Primary Color", f"[{theme_config.colors.primary}]●[/{theme_config.colors.primary}] {theme_config.colors.primary}")
        info_table.add_row("Secondary Color", f"[{theme_config.colors.secondary}]●[/{theme_config.colors.secondary}] {theme_config.colors.secondary}")
        info_table.add_row("Success Color", f"[{theme_config.colors.success}]●[/{theme_config.colors.success}] {theme_config.colors.success}")
        info_table.add_row("Warning Color", f"[{theme_config.colors.warning}]●[/{theme_config.colors.warning}] {theme_config.colors.warning}")
        info_table.add_row("Error Color", f"[{theme_config.colors.error}]●[/{theme_config.colors.error}] {theme_config.colors.error}")
        info_table.add_row("ASCII Art", "Yes" if theme_config.layout.show_ascii_art else "No")
        
        console.print(info_table)
        
        # Show color preview
        console.print("\n[bold]Color Preview:[/bold]")
        
        preview_table = Table(box=box.SIMPLE)
        preview_table.add_column("Element", style="white")
        preview_table.add_column("Preview")
        
        preview_table.add_row("Primary", f"[{theme_config.colors.primary}]Sample primary text[/{theme_config.colors.primary}]")
        preview_table.add_row("Secondary", f"[{theme_config.colors.secondary}]Sample secondary text[/{theme_config.colors.secondary}]")
        preview_table.add_row("Success", f"[{theme_config.colors.success}]✓ Success message[/{theme_config.colors.success}]")
        preview_table.add_row("Warning", f"[{theme_config.colors.warning}]⚠ Warning message[/{theme_config.colors.warning}]")
        preview_table.add_row("Error", f"[{theme_config.colors.error}]✗ Error message[/{theme_config.colors.error}]")
        
        console.print(preview_table)
        
        # Show ASCII art if enabled
        if theme_config.layout.show_ascii_art and hasattr(theme_config, 'ascii_art'):
            console.print("\n[bold]ASCII Art:[/bold]")
            console.print(f"[{theme_config.colors.primary}]{theme_config.ascii_art}[/{theme_config.colors.primary}]")
        
        console.print(f"\n[dim]Use 'yamllm theme set {args.theme}' to apply this theme[/dim]")
        
        return 0
        
    except Exception as e:
        console.print(f"[red]✗ Error previewing theme: {e}[/red]")
        return 1


def set_theme(args: argparse.Namespace) -> int:
    """Set the active theme."""
    try:
        from yamllm.ui.themes import theme_manager
        
        if not theme_manager.get_theme(args.theme):
            console.print(f"[red]✗ Theme '{args.theme}' not found[/red]")
            console.print("\n[dim]Available themes:[/dim]")
            for theme_name in theme_manager.list_themes():
                console.print(f"  • {theme_name}")
            return 1
        
        old_theme = theme_manager.get_current_theme()
        theme_manager.set_theme(args.theme)
        
        console.print(f"[green]✓ Theme changed from '{old_theme}' to '{args.theme}'[/green]")
        console.print("[dim]The new theme will be applied to all future YAMLLM sessions[/dim]")
        
        return 0
        
    except Exception as e:
        console.print(f"[red]✗ Error setting theme: {e}[/red]")
        return 1


def show_current_theme(args: argparse.Namespace) -> int:
    """Show the current theme."""
    try:
        from yamllm.ui.themes import theme_manager
        
        current_theme = theme_manager.get_current_theme()
        theme_config = theme_manager.get_theme(current_theme)
        
        console.print(f"\n[bold cyan]Current Theme: {current_theme.title()}[/bold cyan]\n")
        
        if theme_config:
            console.print(f"[white]Description:[/white] {theme_config.description}")
            console.print(f"[white]Primary Color:[/white] [{theme_config.colors.primary}]{theme_config.colors.primary}[/{theme_config.colors.primary}]")
            console.print(f"[white]ASCII Art:[/white] {'Enabled' if theme_config.layout.show_ascii_art else 'Disabled'}")
        
        console.print("\n[dim]Use 'yamllm theme list' to see all available themes[/dim]")
        console.print(f"[dim]Use 'yamllm theme preview {current_theme}' to see full theme details[/dim]")
        
        return 0
        
    except Exception as e:
        console.print(f"[red]✗ Error showing current theme: {e}[/red]")
        return 1


def reset_theme(args: argparse.Namespace) -> int:
    """Reset to the default theme."""
    try:
        from yamllm.ui.themes import theme_manager
        
        old_theme = theme_manager.get_current_theme()
        theme_manager.set_theme("default")
        
        console.print(f"[green]✓ Theme reset from '{old_theme}' to 'default'[/green]")
        
        return 0
        
    except Exception as e:
        console.print(f"[red]✗ Error resetting theme: {e}[/red]")
        return 1


def main(argv: list[str] | None = None) -> int:
    parser = argparse.ArgumentParser(
        prog="yamllm", 
        description="YAMLLM - YAML-based Language Model Configuration & Execution",
        epilog="Use 'yamllm <command> --help' for command-specific help."
    )
    parser.add_argument("--version", action="version", version=f"%(prog)s {__version__}")
    sub = parser.add_subparsers(dest="command", required=False, help="Available commands")

    # Init command - Interactive setup wizard
    init_cmd = sub.add_parser("init", help="Interactive setup wizard for new users")
    init_cmd.set_defaults(func=run_setup_wizard)
    
    # Status command
    status_cmd = sub.add_parser("status", help="Show system status and health checks")
    status_cmd.set_defaults(func=show_status)
    
    # Providers command
    providers_cmd = sub.add_parser("providers", help="List supported LLM providers")
    providers_cmd.add_argument("--check", action="store_true", help="Check provider connectivity")
    providers_cmd.set_defaults(func=list_providers)
    
    # Tools command with subcommands
    tools_cmd = sub.add_parser("tools", help="Tool management and information")
    tools_sub = tools_cmd.add_subparsers(dest="tools_action", help="Tools actions")
    
    # Tools list (default)
    tools_list_cmd = tools_sub.add_parser("list", help="List available tools and tool packs")
    tools_list_cmd.add_argument("--pack", help="Show details for a specific tool pack")
    tools_list_cmd.add_argument("--category", help="Filter by category")
    tools_list_cmd.set_defaults(func=list_tools)
    
    # Tools info
    tools_info_cmd = tools_sub.add_parser("info", help="Show detailed information about a tool")
    tools_info_cmd.add_argument("tool", help="Tool name")
    tools_info_cmd.set_defaults(func=show_tool_info)
    
    # Tools test
    tools_test_cmd = tools_sub.add_parser("test", help="Test a tool")
    tools_test_cmd.add_argument("tool", help="Tool name")
    tools_test_cmd.set_defaults(func=test_tool)
    
    # Tools manage
    tools_manage_cmd = tools_sub.add_parser("manage", help="Interactive tool management")
    tools_manage_cmd.set_defaults(func=manage_tools)
    
    # Tools search
    tools_search_cmd = tools_sub.add_parser("search", help="Search tools")
    tools_search_cmd.add_argument("query", help="Search query")
    tools_search_cmd.set_defaults(func=search_tools)
    
    # Default tools action (for backward compatibility)
    tools_cmd.set_defaults(func=list_tools)
    
    # Config subcommands
    config_cmd = sub.add_parser("config", help="Configuration management")
    config_sub = config_cmd.add_subparsers(dest="config_action", help="Config actions")
    
    # Config create
    create_cmd = config_sub.add_parser("create", help="Create a new configuration file")
    create_cmd.add_argument("--provider", required=True, choices=["openai", "anthropic", "google"],
                           help="LLM provider")
    create_cmd.add_argument("--preset", default="casual", choices=["casual", "coding", "research", "minimal"],
                           help="Configuration preset")
    create_cmd.add_argument("--model", help="Specific model to use")
    create_cmd.add_argument("--output", "-o", help="Output file path")
    create_cmd.add_argument("--temperature", type=float, default=0.7, help="Model temperature")
    create_cmd.add_argument("--max-tokens", type=int, default=1000, help="Maximum tokens")
    create_cmd.add_argument("--streaming", action="store_true", default=True, help="Enable streaming")
    create_cmd.add_argument("--no-streaming", action="store_false", dest="streaming", help="Disable streaming")
    create_cmd.add_argument("--no-tools", action="store_true", help="Disable tools")
    create_cmd.add_argument("--no-memory", action="store_true", help="Disable memory")
    create_cmd.set_defaults(func=create_config)
    
    # Config validate
    validate_cmd = config_sub.add_parser("validate", help="Validate a configuration file")
    validate_cmd.add_argument("config", help="Path to YAML config file")
    validate_cmd.set_defaults(func=validate_config)
    
    # Config presets
    presets_cmd = config_sub.add_parser("presets", help="List available configuration presets")
    presets_cmd.set_defaults(func=list_presets)
    
    # Config models
    models_cmd = config_sub.add_parser("models", help="List available models")
    models_cmd.set_defaults(func=list_models)
    
    # Quick start command
    quickstart_cmd = sub.add_parser("quickstart", help="Show quick start guide")
    quickstart_cmd.set_defaults(func=show_quick_start)
    
    # Getting started guide
    guide_cmd = sub.add_parser("guide", help="Show comprehensive getting started guide")
    guide_cmd.set_defaults(func=show_getting_started)
    
    # Theme management
    theme_cmd = sub.add_parser("theme", help="UI theme management")
    theme_sub = theme_cmd.add_subparsers(dest="theme_action", help="Theme actions")
    
    # Theme list
    theme_list_cmd = theme_sub.add_parser("list", help="List available themes")
    theme_list_cmd.set_defaults(func=list_themes)
    
    # Theme preview
    theme_preview_cmd = theme_sub.add_parser("preview", help="Preview a theme")
    theme_preview_cmd.add_argument("theme", help="Theme name to preview")
    theme_preview_cmd.set_defaults(func=preview_theme)
    
    # Theme set
    theme_set_cmd = theme_sub.add_parser("set", help="Set active theme")
    theme_set_cmd.add_argument("theme", help="Theme name to set")
    theme_set_cmd.set_defaults(func=set_theme)
    
    # Theme current
    theme_current_cmd = theme_sub.add_parser("current", help="Show current theme")
    theme_current_cmd.set_defaults(func=show_current_theme)
    
    # Theme reset
    theme_reset_cmd = theme_sub.add_parser("reset", help="Reset to default theme")
    theme_reset_cmd.set_defaults(func=reset_theme)
    
    # Default theme action
    theme_cmd.set_defaults(func=list_themes)

    # Chat command (existing)
    chat = sub.add_parser("chat", help="Run an interactive chat session")
    chat.add_argument("--config", required=True, help="Path to YAML config file")
    chat.add_argument("--api-key-env", default=None, help="Env var name holding provider API key (e.g., OPENAI_API_KEY)")
    chat.add_argument("--style", default="bubble", help="Chat UI style: bubble|minimal|compact")
    chat.add_argument("--enhanced", action="store_true", help="Use enhanced chat interface with commands and shortcuts")
    chat.set_defaults(func=run_chat)

    # Run alias for chat (manifesto-aligned quick start)
    run_cmd = sub.add_parser("run", help="Alias for 'chat'")
    run_cmd.add_argument("--config", required=True, help="Path to YAML config file")
    run_cmd.add_argument("--api-key-env", default=None, help="Env var name holding provider API key (e.g., OPENAI_API_KEY)")
    run_cmd.add_argument("--style", default="bubble", help="Chat UI style: bubble|minimal|compact")
    run_cmd.add_argument("--enhanced", action="store_true", help="Use enhanced chat interface with commands and shortcuts")
    run_cmd.set_defaults(func=run_chat)

    # Migrate index command (existing)
    mig = sub.add_parser("migrate-index", help="Inspect or purge FAISS index for a vector store")
    mig.add_argument("--store-path", required=True, help="Path to vector store directory")
    mig.add_argument("--expect-dim", type=int, default=None, help="Expected embedding dimension")
    mig.add_argument("--purge", action="store_true", help="Delete index and metadata to rebuild from scratch")
    mig.set_defaults(func=migrate_index)

    # MCP commands
    def mcp_list(args: argparse.Namespace) -> int:
        try:
            from yamllm.core.llm import LLM
            cfg = args.config
            llm = LLM(config_path=cfg, api_key=os.getenv("OPENAI_API_KEY") or "")
            if not llm.mcp_client:
                console.print("[yellow]No MCP connectors configured in this config.[/yellow]")
                return 0
            tools_by_conn = asyncio.run(llm.mcp_client.discover_all_tools(force_refresh=True))
            if not tools_by_conn:
                console.print("[yellow]No tools discovered from MCP connectors.[/yellow]")
                return 0
            for name, tools in tools_by_conn.items():
                console.print(f"\n[bold cyan]{name}[/bold cyan] ({len(tools)} tools)")
                for t in tools[:20]:
                    console.print(f" • [bold]{t.get('name')}[/bold]: {t.get('description','')}")
            return 0
        except Exception as e:
            console.print(f"[red]✗ MCP list failed: {e}[/red]")
            return 1

    mcp_cmd = sub.add_parser("mcp", help="MCP utilities")
    mcp_sub = mcp_cmd.add_subparsers(dest="mcp_action", help="MCP actions")
    mcp_list_cmd = mcp_sub.add_parser("list", help="List tools from configured MCP connectors")
    mcp_list_cmd.add_argument("--config", required=True, help="Path to YAML config file")
    mcp_list_cmd.set_defaults(func=mcp_list)

    # Diagnose command
    def diagnose(args: argparse.Namespace) -> int:
        console.print("\n[bold cyan]YAMLLM Diagnose[/bold cyan]\n")
        problems = 0
        try:
            # Basic environment info
            import platform
            console.print(f"Python: [green]{platform.python_version()}[/green]")
            console.print(f"YAMLLM: [green]{__version__}[/green]")

            # Config, if provided
            cfg = None
            if getattr(args, 'config', None):
                try:
                    cfg = parse_yaml_config(args.config)
                    console.print(f"Config: [green]{args.config}[/green]")
                except Exception as e:
                    console.print(f"Config: [red]invalid ({e})[/red]")
                    problems += 1

            # Env keys
            api_envs = [
                "OPENAI_API_KEY", "ANTHROPIC_API_KEY", "GOOGLE_API_KEY",
                "MISTRAL_API_KEY", "OPENROUTER_API_KEY", "AZURE_OPENAI_API_KEY",
            ]
            console.print("\n[bold]API Keys:[/bold]")
            for k in api_envs:
                v = os.getenv(k)
                status = "✓ set" if v else "○ not set"
                console.print(f"  {k}: {status}")
            
            # If config present, check provider-specific key
            if cfg:
                prov = getattr(cfg.provider, 'name', '').lower()
                required = {
                    'openai': 'OPENAI_API_KEY',
                    'anthropic': 'ANTHROPIC_API_KEY',
                    'google': 'GOOGLE_API_KEY',
                    'mistral': 'MISTRAL_API_KEY',
                    'azure_openai': 'AZURE_OPENAI_API_KEY',
                    'openrouter': 'OPENROUTER_API_KEY',
                }.get(prov)
                if required and not os.getenv(required):
                    console.print(f"[yellow]Warning:[/yellow] Missing {required} for provider '{prov}'.")
                    problems += 1

            # Vector store dimension check
            try:
                if cfg and getattr(cfg.context, 'memory', None) and cfg.context.memory.enabled:
                    from yamllm.core.llm import LLM
                    llm = LLM(args.config, api_key=os.getenv("OPENAI_API_KEY") or "")
                    expected_dim = llm._infer_embedding_dimension()
                    idx_path = getattr(cfg.context.memory.vector_store, 'index_path', None)
                    if idx_path and os.path.exists(idx_path):
                        try:
                            import faiss
                            index = faiss.read_index(idx_path)
                            dim = getattr(index, 'd', None)
                            if dim is not None and dim != expected_dim:
                                console.print(
                                    f"[yellow]Vector index dimension {dim} != expected {expected_dim}[/yellow]"
                                )
                                problems += 1
                            else:
                                console.print("Vector index dimension: [green]OK[/green]")
                        except Exception as e:
                            console.print(f"Vector index check: [yellow]{e}[/yellow]")
            except Exception as e:
                console.print(f"Vector store diagnostic failed: [yellow]{e}[/yellow]")

            # Tool registry snapshot
            try:
                all_tools = tool_manager.list_tools()
                console.print(f"\nTools registered: [green]{len(all_tools)}[/green]")
                if len(all_tools) == 0:
                    console.print("[yellow]No tools registered. Enable tools in config.tools[/yellow]")
            except Exception as e:
                console.print(f"Tools: [yellow]{e}[/yellow]")

            # Exit code
            if problems:
                console.print(f"\n[bold yellow]{problems} potential issues detected[/bold yellow]")
                return 1
            console.print("\n[bold green]No issues detected[/bold green]")
            return 0
        except Exception as e:
            console.print(f"[red]Diagnose failed: {e}[/red]")
            return 1

    diag_cmd = sub.add_parser("diagnose", help="Run quick environment and config checks")
    diag_cmd.add_argument("--config", help="Path to YAML config file", default=None)
    diag_cmd.set_defaults(func=diagnose)

    args = parser.parse_args(argv)
    
    # If no command specified, show quick start
    if not hasattr(args, 'func'):
        if args.command is None:
            return show_quick_start(args)
        else:
            parser.print_help()
            return 1
        
    return args.func(args)


if __name__ == "__main__":
    sys.exit(main())
